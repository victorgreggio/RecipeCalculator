//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Formula.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RecipeCalculator.Engine.Parser {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="FormulaParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public interface IFormulaVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="FormulaParser.execute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExecute([NotNull] FormulaParser.ExecuteContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FormulaParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] FormulaParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FormulaParser.errorFunctionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitErrorFunctionCall([NotNull] FormulaParser.ErrorFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>maxFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMaxFunctionCall([NotNull] FormulaParser.MaxFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>minFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMinFunctionCall([NotNull] FormulaParser.MinFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>roundFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRoundFunctionCall([NotNull] FormulaParser.RoundFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ceilFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCeilFunctionCall([NotNull] FormulaParser.CeilFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>floorFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFloorFunctionCall([NotNull] FormulaParser.FloorFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpFunctionCall([NotNull] FormulaParser.ExpFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>dayFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDayFunctionCall([NotNull] FormulaParser.DayFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>monthFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMonthFunctionCall([NotNull] FormulaParser.MonthFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>yearFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitYearFunctionCall([NotNull] FormulaParser.YearFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>substrFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubstrFunctionCall([NotNull] FormulaParser.SubstrFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>addDaysFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddDaysFunctionCall([NotNull] FormulaParser.AddDaysFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>getDiffDaysFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGetDiffDaysFunctionCall([NotNull] FormulaParser.GetDiffDaysFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>paddedStringFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPaddedStringFunctionCall([NotNull] FormulaParser.PaddedStringFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>differenceInMonthsFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDifferenceInMonthsFunctionCall([NotNull] FormulaParser.DifferenceInMonthsFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>getOutputFromFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGetOutputFromFunctionCall([NotNull] FormulaParser.GetOutputFromFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>identifierFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierFunctionCall([NotNull] FormulaParser.IdentifierFunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FormulaParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] FormulaParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FormulaParser.ifStat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStat([NotNull] FormulaParser.IfStatContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FormulaParser.elseIfStat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseIfStat([NotNull] FormulaParser.ElseIfStatContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FormulaParser.elseStat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseStat([NotNull] FormulaParser.ElseStatContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="FormulaParser.exprList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprList([NotNull] FormulaParser.ExprListContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ltExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLtExpression([NotNull] FormulaParser.LtExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>gtExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGtExpression([NotNull] FormulaParser.GtExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBoolExpression([NotNull] FormulaParser.BoolExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>notEqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotEqExpression([NotNull] FormulaParser.NotEqExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>moduloExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitModuloExpression([NotNull] FormulaParser.ModuloExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>numberExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberExpression([NotNull] FormulaParser.NumberExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierExpression([NotNull] FormulaParser.IdentifierExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotExpression([NotNull] FormulaParser.NotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>multiplyExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplyExpression([NotNull] FormulaParser.MultiplyExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>gtEqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGtEqExpression([NotNull] FormulaParser.GtEqExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>divideExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDivideExpression([NotNull] FormulaParser.DivideExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrExpression([NotNull] FormulaParser.OrExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>unaryMinusExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryMinusExpression([NotNull] FormulaParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>powerExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPowerExpression([NotNull] FormulaParser.PowerExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>eqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqExpression([NotNull] FormulaParser.EqExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAndExpression([NotNull] FormulaParser.AndExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>stringExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringExpression([NotNull] FormulaParser.StringExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionExpression([NotNull] FormulaParser.ExpressionExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>addExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddExpression([NotNull] FormulaParser.AddExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>subtractExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubtractExpression([NotNull] FormulaParser.SubtractExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCallExpression([NotNull] FormulaParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ltEqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLtEqExpression([NotNull] FormulaParser.LtEqExpressionContext context);
}
} // namespace RecipeCalculator.Engine.Parser
