//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Formula.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RecipeCalculator.Engine.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class FormulaLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, If=4, Then=5, Else=6, Return=7, End=8, Or=9, And=10, 
		Max=11, Min=12, Rnd=13, Ceil=14, Floor=15, Exp=16, Year=17, Month=18, 
		Day=19, Substr=20, Error=21, Mod=22, AddDays=23, GetDiffDays=24, PaddedString=25, 
		DifferenceInMonths=26, GetOutputFrom=27, A=28, B=29, C=30, D=31, E=32, 
		F=33, G=34, H=35, I=36, L=37, M=38, N=39, O=40, P=41, R=42, S=43, T=44, 
		U=45, X=46, Y=47, Equals=48, NEquals=49, GTEquals=50, LTEquals=51, Pow=52, 
		Excl=53, GT=54, LT=55, Add=56, Subtract=57, Multiply=58, Divide=59, Modulus=60, 
		Bool=61, Number=62, Identifier=63, String=64, Space=65, Line_Comment=66, 
		Comment=67, New_Line=68, ErrorCharacter=69;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "If", "Then", "Else", "Return", "End", "Or", "And", 
		"Max", "Min", "Rnd", "Ceil", "Floor", "Exp", "Year", "Month", "Day", "Substr", 
		"Error", "Mod", "AddDays", "GetDiffDays", "PaddedString", "DifferenceInMonths", 
		"GetOutputFrom", "A", "B", "C", "D", "E", "F", "G", "H", "I", "L", "M", 
		"N", "O", "P", "R", "S", "T", "U", "X", "Y", "Equals", "NEquals", "GTEquals", 
		"LTEquals", "Pow", "Excl", "GT", "LT", "Add", "Subtract", "Multiply", 
		"Divide", "Modulus", "Bool", "Number", "Identifier", "String", "Space", 
		"Line_Comment", "Comment", "New_Line", "Int", "Digit", "ErrorCharacter"
	};


	public FormulaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public FormulaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'='", "'<>'", "'>='", "'<='", "'^'", "'!'", "'>'", "'<'", "'+'", "'-'", 
		"'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "If", "Then", "Else", "Return", "End", "Or", "And", 
		"Max", "Min", "Rnd", "Ceil", "Floor", "Exp", "Year", "Month", "Day", "Substr", 
		"Error", "Mod", "AddDays", "GetDiffDays", "PaddedString", "DifferenceInMonths", 
		"GetOutputFrom", "A", "B", "C", "D", "E", "F", "G", "H", "I", "L", "M", 
		"N", "O", "P", "R", "S", "T", "U", "X", "Y", "Equals", "NEquals", "GTEquals", 
		"LTEquals", "Pow", "Excl", "GT", "LT", "Add", "Subtract", "Multiply", 
		"Divide", "Modulus", "Bool", "Number", "Identifier", "String", "Space", 
		"Line_Comment", "Comment", "New_Line", "ErrorCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Formula.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FormulaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,69,470,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
		7,70,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
		5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,
		1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
		1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
		1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
		1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
		1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,
		1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,
		1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,
		1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,52,1,52,
		1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,
		1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,384,8,60,1,61,1,61,1,
		61,5,61,389,8,61,10,61,12,61,392,9,61,3,61,394,8,61,1,62,1,62,5,62,398,
		8,62,10,62,12,62,401,9,62,1,63,1,63,1,63,1,63,1,63,1,63,5,63,409,8,63,
		10,63,12,63,412,9,63,1,63,1,63,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,
		5,65,424,8,65,10,65,12,65,427,9,65,1,65,3,65,430,8,65,1,65,1,65,1,65,1,
		65,1,66,1,66,1,66,1,66,5,66,440,8,66,10,66,12,66,443,9,66,1,66,1,66,1,
		66,1,66,1,66,1,67,3,67,451,8,67,1,67,1,67,1,67,1,67,1,68,1,68,5,68,459,
		8,68,10,68,12,68,462,9,68,1,68,3,68,465,8,68,1,69,1,69,1,70,1,70,2,425,
		441,0,71,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
		13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
		25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
		37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
		49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,
		119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,0,139,
		0,141,69,1,0,27,2,0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,
		68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,103,2,0,72,
		72,104,104,2,0,73,73,105,105,2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,
		78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,2,0,82,82,114,114,2,0,83,
		83,115,115,2,0,84,84,116,116,2,0,85,85,117,117,2,0,88,88,120,120,2,0,89,
		89,121,121,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,39,
		39,3,0,10,10,13,13,39,39,3,0,9,10,12,13,32,32,1,0,49,57,1,0,48,57,480,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
		1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
		0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,
		0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,
		0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,
		0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,141,1,0,0,0,1,143,1,0,0,
		0,3,145,1,0,0,0,5,147,1,0,0,0,7,149,1,0,0,0,9,152,1,0,0,0,11,157,1,0,0,
		0,13,162,1,0,0,0,15,169,1,0,0,0,17,173,1,0,0,0,19,176,1,0,0,0,21,180,1,
		0,0,0,23,184,1,0,0,0,25,188,1,0,0,0,27,192,1,0,0,0,29,197,1,0,0,0,31,203,
		1,0,0,0,33,207,1,0,0,0,35,212,1,0,0,0,37,218,1,0,0,0,39,222,1,0,0,0,41,
		229,1,0,0,0,43,235,1,0,0,0,45,239,1,0,0,0,47,247,1,0,0,0,49,259,1,0,0,
		0,51,272,1,0,0,0,53,291,1,0,0,0,55,305,1,0,0,0,57,307,1,0,0,0,59,309,1,
		0,0,0,61,311,1,0,0,0,63,313,1,0,0,0,65,315,1,0,0,0,67,317,1,0,0,0,69,319,
		1,0,0,0,71,321,1,0,0,0,73,323,1,0,0,0,75,325,1,0,0,0,77,327,1,0,0,0,79,
		329,1,0,0,0,81,331,1,0,0,0,83,333,1,0,0,0,85,335,1,0,0,0,87,337,1,0,0,
		0,89,339,1,0,0,0,91,341,1,0,0,0,93,343,1,0,0,0,95,345,1,0,0,0,97,347,1,
		0,0,0,99,350,1,0,0,0,101,353,1,0,0,0,103,356,1,0,0,0,105,358,1,0,0,0,107,
		360,1,0,0,0,109,362,1,0,0,0,111,364,1,0,0,0,113,366,1,0,0,0,115,368,1,
		0,0,0,117,370,1,0,0,0,119,372,1,0,0,0,121,383,1,0,0,0,123,385,1,0,0,0,
		125,395,1,0,0,0,127,402,1,0,0,0,129,415,1,0,0,0,131,419,1,0,0,0,133,435,
		1,0,0,0,135,450,1,0,0,0,137,464,1,0,0,0,139,466,1,0,0,0,141,468,1,0,0,
		0,143,144,5,40,0,0,144,2,1,0,0,0,145,146,5,41,0,0,146,4,1,0,0,0,147,148,
		5,44,0,0,148,6,1,0,0,0,149,150,3,71,35,0,150,151,3,65,32,0,151,8,1,0,0,
		0,152,153,3,87,43,0,153,154,3,69,34,0,154,155,3,63,31,0,155,156,3,77,38,
		0,156,10,1,0,0,0,157,158,3,63,31,0,158,159,3,73,36,0,159,160,3,85,42,0,
		160,161,3,63,31,0,161,12,1,0,0,0,162,163,3,83,41,0,163,164,3,63,31,0,164,
		165,3,87,43,0,165,166,3,89,44,0,166,167,3,83,41,0,167,168,3,77,38,0,168,
		14,1,0,0,0,169,170,3,63,31,0,170,171,3,77,38,0,171,172,3,61,30,0,172,16,
		1,0,0,0,173,174,3,79,39,0,174,175,3,83,41,0,175,18,1,0,0,0,176,177,3,55,
		27,0,177,178,3,77,38,0,178,179,3,61,30,0,179,20,1,0,0,0,180,181,3,75,37,
		0,181,182,3,55,27,0,182,183,3,91,45,0,183,22,1,0,0,0,184,185,3,75,37,0,
		185,186,3,71,35,0,186,187,3,77,38,0,187,24,1,0,0,0,188,189,3,83,41,0,189,
		190,3,77,38,0,190,191,3,61,30,0,191,26,1,0,0,0,192,193,3,59,29,0,193,194,
		3,63,31,0,194,195,3,71,35,0,195,196,3,73,36,0,196,28,1,0,0,0,197,198,3,
		65,32,0,198,199,3,73,36,0,199,200,3,79,39,0,200,201,3,79,39,0,201,202,
		3,83,41,0,202,30,1,0,0,0,203,204,3,63,31,0,204,205,3,91,45,0,205,206,3,
		81,40,0,206,32,1,0,0,0,207,208,3,93,46,0,208,209,3,63,31,0,209,210,3,55,
		27,0,210,211,3,83,41,0,211,34,1,0,0,0,212,213,3,75,37,0,213,214,3,79,39,
		0,214,215,3,77,38,0,215,216,3,87,43,0,216,217,3,69,34,0,217,36,1,0,0,0,
		218,219,3,61,30,0,219,220,3,55,27,0,220,221,3,93,46,0,221,38,1,0,0,0,222,
		223,3,85,42,0,223,224,3,89,44,0,224,225,3,57,28,0,225,226,3,85,42,0,226,
		227,3,87,43,0,227,228,3,83,41,0,228,40,1,0,0,0,229,230,3,63,31,0,230,231,
		3,83,41,0,231,232,3,83,41,0,232,233,3,79,39,0,233,234,3,83,41,0,234,42,
		1,0,0,0,235,236,3,75,37,0,236,237,3,79,39,0,237,238,3,61,30,0,238,44,1,
		0,0,0,239,240,3,55,27,0,240,241,3,61,30,0,241,242,3,61,30,0,242,243,3,
		61,30,0,243,244,3,55,27,0,244,245,3,93,46,0,245,246,3,85,42,0,246,46,1,
		0,0,0,247,248,3,67,33,0,248,249,3,63,31,0,249,250,3,87,43,0,250,251,3,
		61,30,0,251,252,3,71,35,0,252,253,3,65,32,0,253,254,3,65,32,0,254,255,
		3,61,30,0,255,256,3,55,27,0,256,257,3,93,46,0,257,258,3,85,42,0,258,48,
		1,0,0,0,259,260,3,81,40,0,260,261,3,55,27,0,261,262,3,61,30,0,262,263,
		3,61,30,0,263,264,3,63,31,0,264,265,3,61,30,0,265,266,3,85,42,0,266,267,
		3,87,43,0,267,268,3,83,41,0,268,269,3,71,35,0,269,270,3,77,38,0,270,271,
		3,67,33,0,271,50,1,0,0,0,272,273,3,61,30,0,273,274,3,71,35,0,274,275,3,
		65,32,0,275,276,3,65,32,0,276,277,3,63,31,0,277,278,3,83,41,0,278,279,
		3,63,31,0,279,280,3,77,38,0,280,281,3,59,29,0,281,282,3,63,31,0,282,283,
		3,71,35,0,283,284,3,77,38,0,284,285,3,75,37,0,285,286,3,79,39,0,286,287,
		3,77,38,0,287,288,3,87,43,0,288,289,3,69,34,0,289,290,3,85,42,0,290,52,
		1,0,0,0,291,292,3,67,33,0,292,293,3,63,31,0,293,294,3,87,43,0,294,295,
		3,79,39,0,295,296,3,89,44,0,296,297,3,87,43,0,297,298,3,81,40,0,298,299,
		3,89,44,0,299,300,3,87,43,0,300,301,3,65,32,0,301,302,3,83,41,0,302,303,
		3,79,39,0,303,304,3,75,37,0,304,54,1,0,0,0,305,306,7,0,0,0,306,56,1,0,
		0,0,307,308,7,1,0,0,308,58,1,0,0,0,309,310,7,2,0,0,310,60,1,0,0,0,311,
		312,7,3,0,0,312,62,1,0,0,0,313,314,7,4,0,0,314,64,1,0,0,0,315,316,7,5,
		0,0,316,66,1,0,0,0,317,318,7,6,0,0,318,68,1,0,0,0,319,320,7,7,0,0,320,
		70,1,0,0,0,321,322,7,8,0,0,322,72,1,0,0,0,323,324,7,9,0,0,324,74,1,0,0,
		0,325,326,7,10,0,0,326,76,1,0,0,0,327,328,7,11,0,0,328,78,1,0,0,0,329,
		330,7,12,0,0,330,80,1,0,0,0,331,332,7,13,0,0,332,82,1,0,0,0,333,334,7,
		14,0,0,334,84,1,0,0,0,335,336,7,15,0,0,336,86,1,0,0,0,337,338,7,16,0,0,
		338,88,1,0,0,0,339,340,7,17,0,0,340,90,1,0,0,0,341,342,7,18,0,0,342,92,
		1,0,0,0,343,344,7,19,0,0,344,94,1,0,0,0,345,346,5,61,0,0,346,96,1,0,0,
		0,347,348,5,60,0,0,348,349,5,62,0,0,349,98,1,0,0,0,350,351,5,62,0,0,351,
		352,5,61,0,0,352,100,1,0,0,0,353,354,5,60,0,0,354,355,5,61,0,0,355,102,
		1,0,0,0,356,357,5,94,0,0,357,104,1,0,0,0,358,359,5,33,0,0,359,106,1,0,
		0,0,360,361,5,62,0,0,361,108,1,0,0,0,362,363,5,60,0,0,363,110,1,0,0,0,
		364,365,5,43,0,0,365,112,1,0,0,0,366,367,5,45,0,0,367,114,1,0,0,0,368,
		369,5,42,0,0,369,116,1,0,0,0,370,371,5,47,0,0,371,118,1,0,0,0,372,373,
		5,37,0,0,373,120,1,0,0,0,374,375,5,116,0,0,375,376,5,114,0,0,376,377,5,
		117,0,0,377,384,5,101,0,0,378,379,5,102,0,0,379,380,5,97,0,0,380,381,5,
		108,0,0,381,382,5,115,0,0,382,384,5,101,0,0,383,374,1,0,0,0,383,378,1,
		0,0,0,384,122,1,0,0,0,385,393,3,137,68,0,386,390,5,46,0,0,387,389,3,139,
		69,0,388,387,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,
		394,1,0,0,0,392,390,1,0,0,0,393,386,1,0,0,0,393,394,1,0,0,0,394,124,1,
		0,0,0,395,399,7,20,0,0,396,398,7,21,0,0,397,396,1,0,0,0,398,401,1,0,0,
		0,399,397,1,0,0,0,399,400,1,0,0,0,400,126,1,0,0,0,401,399,1,0,0,0,402,
		410,7,22,0,0,403,409,8,23,0,0,404,405,5,92,0,0,405,409,5,92,0,0,406,407,
		5,92,0,0,407,409,5,39,0,0,408,403,1,0,0,0,408,404,1,0,0,0,408,406,1,0,
		0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,
		410,1,0,0,0,413,414,7,22,0,0,414,128,1,0,0,0,415,416,7,24,0,0,416,417,
		1,0,0,0,417,418,6,64,0,0,418,130,1,0,0,0,419,420,5,47,0,0,420,421,5,47,
		0,0,421,425,1,0,0,0,422,424,9,0,0,0,423,422,1,0,0,0,424,427,1,0,0,0,425,
		426,1,0,0,0,425,423,1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,428,430,5,
		13,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,432,5,10,0,
		0,432,433,1,0,0,0,433,434,6,65,0,0,434,132,1,0,0,0,435,436,5,47,0,0,436,
		437,5,42,0,0,437,441,1,0,0,0,438,440,9,0,0,0,439,438,1,0,0,0,440,443,1,
		0,0,0,441,442,1,0,0,0,441,439,1,0,0,0,442,444,1,0,0,0,443,441,1,0,0,0,
		444,445,5,42,0,0,445,446,5,47,0,0,446,447,1,0,0,0,447,448,6,66,0,0,448,
		134,1,0,0,0,449,451,5,13,0,0,450,449,1,0,0,0,450,451,1,0,0,0,451,452,1,
		0,0,0,452,453,5,10,0,0,453,454,1,0,0,0,454,455,6,67,0,0,455,136,1,0,0,
		0,456,460,7,25,0,0,457,459,3,139,69,0,458,457,1,0,0,0,459,462,1,0,0,0,
		460,458,1,0,0,0,460,461,1,0,0,0,461,465,1,0,0,0,462,460,1,0,0,0,463,465,
		5,48,0,0,464,456,1,0,0,0,464,463,1,0,0,0,465,138,1,0,0,0,466,467,7,26,
		0,0,467,140,1,0,0,0,468,469,9,0,0,0,469,142,1,0,0,0,13,0,383,390,393,399,
		408,410,425,429,441,450,460,464,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace RecipeCalculator.Engine.Parser
