//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Formula.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RecipeCalculator.Engine.Parser {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="FormulaParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public interface IFormulaListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.execute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExecute([NotNull] FormulaParser.ExecuteContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.execute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExecute([NotNull] FormulaParser.ExecuteContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] FormulaParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] FormulaParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.errorFunctionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterErrorFunctionCall([NotNull] FormulaParser.ErrorFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.errorFunctionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitErrorFunctionCall([NotNull] FormulaParser.ErrorFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>maxFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMaxFunctionCall([NotNull] FormulaParser.MaxFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>maxFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMaxFunctionCall([NotNull] FormulaParser.MaxFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>minFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinFunctionCall([NotNull] FormulaParser.MinFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>minFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinFunctionCall([NotNull] FormulaParser.MinFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>roundFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRoundFunctionCall([NotNull] FormulaParser.RoundFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>roundFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRoundFunctionCall([NotNull] FormulaParser.RoundFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ceilFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCeilFunctionCall([NotNull] FormulaParser.CeilFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ceilFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCeilFunctionCall([NotNull] FormulaParser.CeilFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>floorFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloorFunctionCall([NotNull] FormulaParser.FloorFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>floorFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloorFunctionCall([NotNull] FormulaParser.FloorFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpFunctionCall([NotNull] FormulaParser.ExpFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpFunctionCall([NotNull] FormulaParser.ExpFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dayFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDayFunctionCall([NotNull] FormulaParser.DayFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dayFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDayFunctionCall([NotNull] FormulaParser.DayFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>monthFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMonthFunctionCall([NotNull] FormulaParser.MonthFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>monthFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMonthFunctionCall([NotNull] FormulaParser.MonthFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>yearFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterYearFunctionCall([NotNull] FormulaParser.YearFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>yearFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitYearFunctionCall([NotNull] FormulaParser.YearFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>substrFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubstrFunctionCall([NotNull] FormulaParser.SubstrFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>substrFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubstrFunctionCall([NotNull] FormulaParser.SubstrFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>addDaysFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddDaysFunctionCall([NotNull] FormulaParser.AddDaysFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addDaysFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddDaysFunctionCall([NotNull] FormulaParser.AddDaysFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>getDiffDaysFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetDiffDaysFunctionCall([NotNull] FormulaParser.GetDiffDaysFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>getDiffDaysFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetDiffDaysFunctionCall([NotNull] FormulaParser.GetDiffDaysFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>paddedStringFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPaddedStringFunctionCall([NotNull] FormulaParser.PaddedStringFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>paddedStringFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPaddedStringFunctionCall([NotNull] FormulaParser.PaddedStringFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>differenceInMonthsFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDifferenceInMonthsFunctionCall([NotNull] FormulaParser.DifferenceInMonthsFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>differenceInMonthsFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDifferenceInMonthsFunctionCall([NotNull] FormulaParser.DifferenceInMonthsFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>getOutputFromFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGetOutputFromFunctionCall([NotNull] FormulaParser.GetOutputFromFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>getOutputFromFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGetOutputFromFunctionCall([NotNull] FormulaParser.GetOutputFromFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierFunctionCall([NotNull] FormulaParser.IdentifierFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierFunctionCall([NotNull] FormulaParser.IdentifierFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] FormulaParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] FormulaParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.ifStat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStat([NotNull] FormulaParser.IfStatContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.ifStat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStat([NotNull] FormulaParser.IfStatContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.elseIfStat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfStat([NotNull] FormulaParser.ElseIfStatContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.elseIfStat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfStat([NotNull] FormulaParser.ElseIfStatContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.elseStat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseStat([NotNull] FormulaParser.ElseStatContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.elseStat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseStat([NotNull] FormulaParser.ElseStatContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.exprList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprList([NotNull] FormulaParser.ExprListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.exprList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprList([NotNull] FormulaParser.ExprListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ltExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLtExpression([NotNull] FormulaParser.LtExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ltExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLtExpression([NotNull] FormulaParser.LtExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>gtExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGtExpression([NotNull] FormulaParser.GtExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>gtExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGtExpression([NotNull] FormulaParser.GtExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolExpression([NotNull] FormulaParser.BoolExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolExpression([NotNull] FormulaParser.BoolExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notEqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotEqExpression([NotNull] FormulaParser.NotEqExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notEqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotEqExpression([NotNull] FormulaParser.NotEqExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>moduloExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterModuloExpression([NotNull] FormulaParser.ModuloExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>moduloExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitModuloExpression([NotNull] FormulaParser.ModuloExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numberExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberExpression([NotNull] FormulaParser.NumberExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numberExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberExpression([NotNull] FormulaParser.NumberExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] FormulaParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] FormulaParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] FormulaParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] FormulaParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplyExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplyExpression([NotNull] FormulaParser.MultiplyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplyExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplyExpression([NotNull] FormulaParser.MultiplyExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>gtEqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGtEqExpression([NotNull] FormulaParser.GtEqExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>gtEqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGtEqExpression([NotNull] FormulaParser.GtEqExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>divideExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDivideExpression([NotNull] FormulaParser.DivideExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>divideExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDivideExpression([NotNull] FormulaParser.DivideExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpression([NotNull] FormulaParser.OrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpression([NotNull] FormulaParser.OrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryMinusExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryMinusExpression([NotNull] FormulaParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryMinusExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryMinusExpression([NotNull] FormulaParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>powerExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPowerExpression([NotNull] FormulaParser.PowerExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>powerExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPowerExpression([NotNull] FormulaParser.PowerExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>eqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqExpression([NotNull] FormulaParser.EqExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>eqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqExpression([NotNull] FormulaParser.EqExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpression([NotNull] FormulaParser.AndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpression([NotNull] FormulaParser.AndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringExpression([NotNull] FormulaParser.StringExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringExpression([NotNull] FormulaParser.StringExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionExpression([NotNull] FormulaParser.ExpressionExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionExpression([NotNull] FormulaParser.ExpressionExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>addExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddExpression([NotNull] FormulaParser.AddExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddExpression([NotNull] FormulaParser.AddExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>subtractExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubtractExpression([NotNull] FormulaParser.SubtractExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>subtractExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubtractExpression([NotNull] FormulaParser.SubtractExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallExpression([NotNull] FormulaParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallExpression([NotNull] FormulaParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ltEqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLtEqExpression([NotNull] FormulaParser.LtEqExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ltEqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLtEqExpression([NotNull] FormulaParser.LtEqExpressionContext context);
}
} // namespace RecipeCalculator.Engine.Parser
