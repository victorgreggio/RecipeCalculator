//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Formula.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RecipeCalculator.Engine.Parser {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IFormulaListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class FormulaBaseListener : IFormulaListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.execute"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExecute([NotNull] FormulaParser.ExecuteContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.execute"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExecute([NotNull] FormulaParser.ExecuteContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] FormulaParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] FormulaParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.errorFunctionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterErrorFunctionCall([NotNull] FormulaParser.ErrorFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.errorFunctionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitErrorFunctionCall([NotNull] FormulaParser.ErrorFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>maxFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMaxFunctionCall([NotNull] FormulaParser.MaxFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>maxFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMaxFunctionCall([NotNull] FormulaParser.MaxFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>minFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMinFunctionCall([NotNull] FormulaParser.MinFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>minFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMinFunctionCall([NotNull] FormulaParser.MinFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>roundFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRoundFunctionCall([NotNull] FormulaParser.RoundFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>roundFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRoundFunctionCall([NotNull] FormulaParser.RoundFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ceilFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCeilFunctionCall([NotNull] FormulaParser.CeilFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ceilFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCeilFunctionCall([NotNull] FormulaParser.CeilFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>floorFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloorFunctionCall([NotNull] FormulaParser.FloorFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>floorFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloorFunctionCall([NotNull] FormulaParser.FloorFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpFunctionCall([NotNull] FormulaParser.ExpFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpFunctionCall([NotNull] FormulaParser.ExpFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>dayFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDayFunctionCall([NotNull] FormulaParser.DayFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>dayFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDayFunctionCall([NotNull] FormulaParser.DayFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>monthFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMonthFunctionCall([NotNull] FormulaParser.MonthFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>monthFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMonthFunctionCall([NotNull] FormulaParser.MonthFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>yearFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterYearFunctionCall([NotNull] FormulaParser.YearFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>yearFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitYearFunctionCall([NotNull] FormulaParser.YearFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>substrFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubstrFunctionCall([NotNull] FormulaParser.SubstrFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>substrFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubstrFunctionCall([NotNull] FormulaParser.SubstrFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>addDaysFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddDaysFunctionCall([NotNull] FormulaParser.AddDaysFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>addDaysFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddDaysFunctionCall([NotNull] FormulaParser.AddDaysFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>getDiffDaysFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGetDiffDaysFunctionCall([NotNull] FormulaParser.GetDiffDaysFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>getDiffDaysFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGetDiffDaysFunctionCall([NotNull] FormulaParser.GetDiffDaysFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>paddedStringFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPaddedStringFunctionCall([NotNull] FormulaParser.PaddedStringFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>paddedStringFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPaddedStringFunctionCall([NotNull] FormulaParser.PaddedStringFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>differenceInMonthsFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDifferenceInMonthsFunctionCall([NotNull] FormulaParser.DifferenceInMonthsFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>differenceInMonthsFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDifferenceInMonthsFunctionCall([NotNull] FormulaParser.DifferenceInMonthsFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>getOutputFromFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGetOutputFromFunctionCall([NotNull] FormulaParser.GetOutputFromFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>getOutputFromFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGetOutputFromFunctionCall([NotNull] FormulaParser.GetOutputFromFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierFunctionCall([NotNull] FormulaParser.IdentifierFunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierFunctionCall</c>
	/// labeled alternative in <see cref="FormulaParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierFunctionCall([NotNull] FormulaParser.IdentifierFunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] FormulaParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] FormulaParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.ifStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStat([NotNull] FormulaParser.IfStatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.ifStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStat([NotNull] FormulaParser.IfStatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.elseIfStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElseIfStat([NotNull] FormulaParser.ElseIfStatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.elseIfStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElseIfStat([NotNull] FormulaParser.ElseIfStatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.elseStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElseStat([NotNull] FormulaParser.ElseStatContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.elseStat"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElseStat([NotNull] FormulaParser.ElseStatContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaParser.exprList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprList([NotNull] FormulaParser.ExprListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaParser.exprList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprList([NotNull] FormulaParser.ExprListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ltExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLtExpression([NotNull] FormulaParser.LtExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ltExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLtExpression([NotNull] FormulaParser.LtExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>gtExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGtExpression([NotNull] FormulaParser.GtExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>gtExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGtExpression([NotNull] FormulaParser.GtExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolExpression([NotNull] FormulaParser.BoolExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolExpression([NotNull] FormulaParser.BoolExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>notEqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotEqExpression([NotNull] FormulaParser.NotEqExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>notEqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotEqExpression([NotNull] FormulaParser.NotEqExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>moduloExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterModuloExpression([NotNull] FormulaParser.ModuloExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>moduloExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitModuloExpression([NotNull] FormulaParser.ModuloExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>numberExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberExpression([NotNull] FormulaParser.NumberExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>numberExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberExpression([NotNull] FormulaParser.NumberExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierExpression([NotNull] FormulaParser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierExpression([NotNull] FormulaParser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotExpression([NotNull] FormulaParser.NotExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotExpression([NotNull] FormulaParser.NotExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>multiplyExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplyExpression([NotNull] FormulaParser.MultiplyExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>multiplyExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplyExpression([NotNull] FormulaParser.MultiplyExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>gtEqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGtEqExpression([NotNull] FormulaParser.GtEqExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>gtEqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGtEqExpression([NotNull] FormulaParser.GtEqExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>divideExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDivideExpression([NotNull] FormulaParser.DivideExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>divideExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDivideExpression([NotNull] FormulaParser.DivideExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrExpression([NotNull] FormulaParser.OrExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrExpression([NotNull] FormulaParser.OrExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryMinusExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryMinusExpression([NotNull] FormulaParser.UnaryMinusExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryMinusExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryMinusExpression([NotNull] FormulaParser.UnaryMinusExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>powerExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPowerExpression([NotNull] FormulaParser.PowerExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>powerExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPowerExpression([NotNull] FormulaParser.PowerExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>eqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEqExpression([NotNull] FormulaParser.EqExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>eqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEqExpression([NotNull] FormulaParser.EqExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAndExpression([NotNull] FormulaParser.AndExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAndExpression([NotNull] FormulaParser.AndExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stringExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringExpression([NotNull] FormulaParser.StringExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringExpression([NotNull] FormulaParser.StringExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionExpression([NotNull] FormulaParser.ExpressionExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionExpression([NotNull] FormulaParser.ExpressionExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>addExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddExpression([NotNull] FormulaParser.AddExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>addExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddExpression([NotNull] FormulaParser.AddExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>subtractExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubtractExpression([NotNull] FormulaParser.SubtractExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>subtractExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubtractExpression([NotNull] FormulaParser.SubtractExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCallExpression([NotNull] FormulaParser.FunctionCallExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCallExpression([NotNull] FormulaParser.FunctionCallExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ltEqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLtEqExpression([NotNull] FormulaParser.LtEqExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ltEqExpression</c>
	/// labeled alternative in <see cref="FormulaParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLtEqExpression([NotNull] FormulaParser.LtEqExpressionContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace RecipeCalculator.Engine.Parser
