//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Formula.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RecipeCalculator.Engine.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class FormulaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, If=4, Then=5, Else=6, Return=7, End=8, Or=9, And=10, 
		Max=11, Min=12, Rnd=13, Ceil=14, Floor=15, Exp=16, Year=17, Month=18, 
		Day=19, Substr=20, Error=21, Mod=22, AddDays=23, GetDiffDays=24, PaddedString=25, 
		DifferenceInMonths=26, GetOutputFrom=27, A=28, B=29, C=30, D=31, E=32, 
		F=33, G=34, H=35, I=36, L=37, M=38, N=39, O=40, P=41, R=42, S=43, T=44, 
		U=45, X=46, Y=47, Equals=48, NEquals=49, GTEquals=50, LTEquals=51, Pow=52, 
		Excl=53, GT=54, LT=55, Add=56, Subtract=57, Multiply=58, Divide=59, Modulus=60, 
		Bool=61, Number=62, Identifier=63, String=64, Space=65, Line_Comment=66, 
		Comment=67, New_Line=68, ErrorCharacter=69;
	public const int
		RULE_execute = 0, RULE_block = 1, RULE_errorFunctionCall = 2, RULE_functionCall = 3, 
		RULE_ifStatement = 4, RULE_ifStat = 5, RULE_elseIfStat = 6, RULE_elseStat = 7, 
		RULE_exprList = 8, RULE_expression = 9;
	public static readonly string[] ruleNames = {
		"execute", "block", "errorFunctionCall", "functionCall", "ifStatement", 
		"ifStat", "elseIfStat", "elseStat", "exprList", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'='", "'<>'", "'>='", "'<='", "'^'", "'!'", "'>'", "'<'", "'+'", "'-'", 
		"'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "If", "Then", "Else", "Return", "End", "Or", "And", 
		"Max", "Min", "Rnd", "Ceil", "Floor", "Exp", "Year", "Month", "Day", "Substr", 
		"Error", "Mod", "AddDays", "GetDiffDays", "PaddedString", "DifferenceInMonths", 
		"GetOutputFrom", "A", "B", "C", "D", "E", "F", "G", "H", "I", "L", "M", 
		"N", "O", "P", "R", "S", "T", "U", "X", "Y", "Equals", "NEquals", "GTEquals", 
		"LTEquals", "Pow", "Excl", "GT", "LT", "Add", "Subtract", "Multiply", 
		"Divide", "Modulus", "Bool", "Number", "Identifier", "String", "Space", 
		"Line_Comment", "Comment", "New_Line", "ErrorCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Formula.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static FormulaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FormulaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FormulaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExecuteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(FormulaParser.Eof, 0); }
		public ExecuteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterExecute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitExecute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteContext execute() {
		ExecuteContext _localctx = new ExecuteContext(Context, State);
		EnterRule(_localctx, 0, RULE_execute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			block();
			State = 21;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(FormulaParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorFunctionCallContext errorFunctionCall() {
			return GetRuleContext<ErrorFunctionCallContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		try {
			State = 27;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 23;
				ifStatement();
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 24;
				Match(Return);
				State = 25;
				expression(0);
				}
				}
				break;
			case Error:
				EnterOuterAlt(_localctx, 3);
				{
				State = 26;
				errorFunctionCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorFunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Error() { return GetToken(FormulaParser.Error, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ErrorFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorFunctionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterErrorFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitErrorFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorFunctionCallContext errorFunctionCall() {
		ErrorFunctionCallContext _localctx = new ErrorFunctionCallContext(Context, State);
		EnterRule(_localctx, 4, RULE_errorFunctionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			Match(Error);
			State = 30;
			Match(T__0);
			State = 31;
			expression(0);
			State = 32;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	 
		public FunctionCallContext() { }
		public virtual void CopyFrom(FunctionCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DifferenceInMonthsFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DifferenceInMonths() { return GetToken(FormulaParser.DifferenceInMonths, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DifferenceInMonthsFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterDifferenceInMonthsFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitDifferenceInMonthsFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDifferenceInMonthsFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class YearFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Year() { return GetToken(FormulaParser.Year, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public YearFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterYearFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitYearFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYearFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetOutputFromFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GetOutputFrom() { return GetToken(FormulaParser.GetOutputFrom, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GetOutputFromFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterGetOutputFromFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitGetOutputFromFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetOutputFromFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DayFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Day() { return GetToken(FormulaParser.Day, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DayFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterDayFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitDayFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDayFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloorFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Floor() { return GetToken(FormulaParser.Floor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FloorFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterFloorFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitFloorFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloorFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddDaysFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AddDays() { return GetToken(FormulaParser.AddDays, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddDaysFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterAddDaysFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitAddDaysFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddDaysFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(FormulaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public IdentifierFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterIdentifierFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitIdentifierFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PaddedStringFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PaddedString() { return GetToken(FormulaParser.PaddedString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PaddedStringFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterPaddedStringFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitPaddedStringFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPaddedStringFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exp() { return GetToken(FormulaParser.Exp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterExpFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitExpFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Min() { return GetToken(FormulaParser.Min, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MinFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterMinFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitMinFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Max() { return GetToken(FormulaParser.Max, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MaxFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterMaxFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitMaxFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoundFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Rnd() { return GetToken(FormulaParser.Rnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RoundFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterRoundFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitRoundFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoundFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MonthFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Month() { return GetToken(FormulaParser.Month, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MonthFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterMonthFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitMonthFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonthFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetDiffDaysFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GetDiffDays() { return GetToken(FormulaParser.GetDiffDays, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public GetDiffDaysFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterGetDiffDaysFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitGetDiffDaysFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetDiffDaysFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CeilFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ceil() { return GetToken(FormulaParser.Ceil, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CeilFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterCeilFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitCeilFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCeilFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubstrFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Substr() { return GetToken(FormulaParser.Substr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubstrFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterSubstrFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitSubstrFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstrFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionCall);
		int _la;
		try {
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Max:
				_localctx = new MaxFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				Match(Max);
				State = 35;
				Match(T__0);
				State = 36;
				expression(0);
				State = 37;
				Match(T__2);
				State = 38;
				expression(0);
				State = 39;
				Match(T__1);
				}
				break;
			case Min:
				_localctx = new MinFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				Match(Min);
				State = 42;
				Match(T__0);
				State = 43;
				expression(0);
				State = 44;
				Match(T__2);
				State = 45;
				expression(0);
				State = 46;
				Match(T__1);
				}
				break;
			case Rnd:
				_localctx = new RoundFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 48;
				Match(Rnd);
				State = 49;
				Match(T__0);
				State = 50;
				expression(0);
				State = 51;
				Match(T__2);
				State = 52;
				expression(0);
				State = 53;
				Match(T__1);
				}
				break;
			case Ceil:
				_localctx = new CeilFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 55;
				Match(Ceil);
				State = 56;
				Match(T__0);
				State = 57;
				expression(0);
				State = 58;
				Match(T__1);
				}
				break;
			case Floor:
				_localctx = new FloorFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 60;
				Match(Floor);
				State = 61;
				Match(T__0);
				State = 62;
				expression(0);
				State = 63;
				Match(T__1);
				}
				break;
			case Exp:
				_localctx = new ExpFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 65;
				Match(Exp);
				State = 66;
				Match(T__0);
				State = 67;
				expression(0);
				State = 68;
				Match(T__1);
				}
				break;
			case Day:
				_localctx = new DayFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 70;
				Match(Day);
				State = 71;
				Match(T__0);
				State = 72;
				expression(0);
				State = 73;
				Match(T__1);
				}
				break;
			case Month:
				_localctx = new MonthFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 75;
				Match(Month);
				State = 76;
				Match(T__0);
				State = 77;
				expression(0);
				State = 78;
				Match(T__1);
				}
				break;
			case Year:
				_localctx = new YearFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 80;
				Match(Year);
				State = 81;
				Match(T__0);
				State = 82;
				expression(0);
				State = 83;
				Match(T__1);
				}
				break;
			case Substr:
				_localctx = new SubstrFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 85;
				Match(Substr);
				State = 86;
				Match(T__0);
				State = 87;
				expression(0);
				State = 88;
				Match(T__2);
				State = 89;
				expression(0);
				State = 90;
				Match(T__2);
				State = 91;
				expression(0);
				State = 92;
				Match(T__1);
				}
				break;
			case AddDays:
				_localctx = new AddDaysFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 94;
				Match(AddDays);
				State = 95;
				Match(T__0);
				State = 96;
				expression(0);
				State = 97;
				Match(T__2);
				State = 98;
				expression(0);
				State = 99;
				Match(T__1);
				}
				break;
			case GetDiffDays:
				_localctx = new GetDiffDaysFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 101;
				Match(GetDiffDays);
				State = 102;
				Match(T__0);
				State = 103;
				expression(0);
				State = 104;
				Match(T__2);
				State = 105;
				expression(0);
				State = 106;
				Match(T__1);
				}
				break;
			case PaddedString:
				_localctx = new PaddedStringFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 108;
				Match(PaddedString);
				State = 109;
				Match(T__0);
				State = 110;
				expression(0);
				State = 111;
				Match(T__2);
				State = 112;
				expression(0);
				State = 113;
				Match(T__1);
				}
				break;
			case DifferenceInMonths:
				_localctx = new DifferenceInMonthsFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 115;
				Match(DifferenceInMonths);
				State = 116;
				Match(T__0);
				State = 117;
				expression(0);
				State = 118;
				Match(T__2);
				State = 119;
				expression(0);
				State = 120;
				Match(T__1);
				}
				break;
			case GetOutputFrom:
				_localctx = new GetOutputFromFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 122;
				Match(GetOutputFrom);
				State = 123;
				Match(T__0);
				State = 124;
				expression(0);
				State = 125;
				Match(T__1);
				}
				break;
			case Identifier:
				_localctx = new IdentifierFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 127;
				Match(Identifier);
				State = 128;
				Match(T__0);
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -1076360310810477567L) != 0)) {
					{
					State = 129;
					exprList();
					}
				}

				State = 132;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(FormulaParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatContext[] elseIfStat() {
			return GetRuleContexts<ElseIfStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatContext elseIfStat(int i) {
			return GetRuleContext<ElseIfStatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatContext elseStat() {
			return GetRuleContext<ElseStatContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ifStat();
			State = 139;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 136;
					elseIfStat();
					}
					} 
				}
				State = 141;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 142;
				elseStat();
				}
			}

			State = 145;
			Match(End);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(FormulaParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(FormulaParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterIfStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitIfStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(If);
			State = 148;
			Match(T__0);
			State = 149;
			expression(0);
			State = 150;
			Match(T__1);
			State = 151;
			Match(Then);
			State = 152;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(FormulaParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(FormulaParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(FormulaParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterElseIfStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitElseIfStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatContext elseIfStat() {
		ElseIfStatContext _localctx = new ElseIfStatContext(Context, State);
		EnterRule(_localctx, 12, RULE_elseIfStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(Else);
			State = 155;
			Match(If);
			State = 156;
			Match(T__0);
			State = 157;
			expression(0);
			State = 158;
			Match(T__1);
			State = 159;
			Match(Then);
			State = 160;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(FormulaParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterElseStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitElseStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatContext elseStat() {
		ElseStatContext _localctx = new ElseStatContext(Context, State);
		EnterRule(_localctx, 14, RULE_elseStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			Match(Else);
			State = 163;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 16, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			expression(0);
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 166;
				Match(T__2);
				State = 167;
				expression(0);
				}
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LtExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(FormulaParser.LT, 0); }
		public LtExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterLtExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitLtExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLtExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GtExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(FormulaParser.GT, 0); }
		public GtExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterGtExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitGtExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(FormulaParser.Bool, 0); }
		public BoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEquals() { return GetToken(FormulaParser.NEquals, 0); }
		public NotEqExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterNotEqExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitNotEqExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEqExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(FormulaParser.Mod, 0); }
		public ModuloExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterModuloExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitModuloExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuloExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(FormulaParser.Number, 0); }
		public NumberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterNumberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitNumberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(FormulaParser.Identifier, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Excl() { return GetToken(FormulaParser.Excl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(FormulaParser.Multiply, 0); }
		public MultiplyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GtEqExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEquals() { return GetToken(FormulaParser.GTEquals, 0); }
		public GtEqExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterGtEqExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitGtEqExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtEqExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(FormulaParser.Divide, 0); }
		public DivideExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterDivideExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitDivideExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(FormulaParser.Or, 0); }
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(FormulaParser.Subtract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pow() { return GetToken(FormulaParser.Pow, 0); }
		public PowerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterPowerExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitPowerExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(FormulaParser.Equals, 0); }
		public EqExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterEqExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitEqExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(FormulaParser.And, 0); }
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(FormulaParser.String, 0); }
		public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterExpressionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitExpressionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(FormulaParser.Add, 0); }
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(FormulaParser.Subtract, 0); }
		public SubtractExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterSubtractExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitSubtractExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LtEqExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEquals() { return GetToken(FormulaParser.LTEquals, 0); }
		public LtEqExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.EnterLtEqExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaListener typedListener = listener as IFormulaListener;
			if (typedListener != null) typedListener.ExitLtEqExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaVisitor<TResult> typedVisitor = visitor as IFormulaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLtEqExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 174;
				Match(Subtract);
				State = 175;
				expression(22);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 176;
				Match(Excl);
				State = 177;
				expression(21);
				}
				break;
			case 3:
				{
				_localctx = new NumberExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 178;
				Match(Number);
				}
				break;
			case 4:
				{
				_localctx = new BoolExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 179;
				Match(Bool);
				}
				break;
			case 5:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 180;
				functionCall();
				}
				break;
			case 6:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 181;
				Match(Identifier);
				}
				break;
			case 7:
				{
				_localctx = new StringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 182;
				Match(String);
				}
				break;
			case 8:
				{
				_localctx = new ExpressionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 183;
				Match(T__0);
				State = 184;
				expression(0);
				State = 185;
				Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 231;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 189;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 190;
						Match(Pow);
						State = 191;
						expression(21);
						}
						break;
					case 2:
						{
						_localctx = new MultiplyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 192;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 193;
						Match(Multiply);
						State = 194;
						expression(20);
						}
						break;
					case 3:
						{
						_localctx = new DivideExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 195;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 196;
						Match(Divide);
						State = 197;
						expression(19);
						}
						break;
					case 4:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 198;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 199;
						Match(Add);
						State = 200;
						expression(18);
						}
						break;
					case 5:
						{
						_localctx = new SubtractExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 201;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 202;
						Match(Subtract);
						State = 203;
						expression(17);
						}
						break;
					case 6:
						{
						_localctx = new GtEqExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 204;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 205;
						Match(GTEquals);
						State = 206;
						expression(16);
						}
						break;
					case 7:
						{
						_localctx = new LtEqExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 207;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 208;
						Match(LTEquals);
						State = 209;
						expression(15);
						}
						break;
					case 8:
						{
						_localctx = new GtExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 210;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 211;
						Match(GT);
						State = 212;
						expression(14);
						}
						break;
					case 9:
						{
						_localctx = new LtExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 213;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 214;
						Match(LT);
						State = 215;
						expression(13);
						}
						break;
					case 10:
						{
						_localctx = new EqExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 216;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 217;
						Match(Equals);
						State = 218;
						expression(12);
						}
						break;
					case 11:
						{
						_localctx = new NotEqExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 219;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 220;
						Match(NEquals);
						State = 221;
						expression(11);
						}
						break;
					case 12:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 222;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 223;
						Match(And);
						State = 224;
						expression(10);
						}
						break;
					case 13:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 225;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 226;
						Match(Or);
						State = 227;
						expression(9);
						}
						break;
					case 14:
						{
						_localctx = new ModuloExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 228;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 229;
						Match(Mod);
						State = 230;
						expression(8);
						}
						break;
					}
					} 
				}
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 12);
		case 9: return Precpred(Context, 11);
		case 10: return Precpred(Context, 10);
		case 11: return Precpred(Context, 9);
		case 12: return Precpred(Context, 8);
		case 13: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,69,237,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,28,8,1,1,2,1,2,1,2,
		1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,131,8,3,1,3,3,3,134,8,3,
		1,4,1,4,5,4,138,8,4,10,4,12,4,141,9,4,1,4,3,4,144,8,4,1,4,1,4,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,
		8,1,8,5,8,169,8,8,10,8,12,8,172,9,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,3,9,188,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,232,
		8,9,10,9,12,9,235,9,9,1,9,0,1,18,10,0,2,4,6,8,10,12,14,16,18,0,0,268,0,
		20,1,0,0,0,2,27,1,0,0,0,4,29,1,0,0,0,6,133,1,0,0,0,8,135,1,0,0,0,10,147,
		1,0,0,0,12,154,1,0,0,0,14,162,1,0,0,0,16,165,1,0,0,0,18,187,1,0,0,0,20,
		21,3,2,1,0,21,22,5,0,0,1,22,1,1,0,0,0,23,28,3,8,4,0,24,25,5,7,0,0,25,28,
		3,18,9,0,26,28,3,4,2,0,27,23,1,0,0,0,27,24,1,0,0,0,27,26,1,0,0,0,28,3,
		1,0,0,0,29,30,5,21,0,0,30,31,5,1,0,0,31,32,3,18,9,0,32,33,5,2,0,0,33,5,
		1,0,0,0,34,35,5,11,0,0,35,36,5,1,0,0,36,37,3,18,9,0,37,38,5,3,0,0,38,39,
		3,18,9,0,39,40,5,2,0,0,40,134,1,0,0,0,41,42,5,12,0,0,42,43,5,1,0,0,43,
		44,3,18,9,0,44,45,5,3,0,0,45,46,3,18,9,0,46,47,5,2,0,0,47,134,1,0,0,0,
		48,49,5,13,0,0,49,50,5,1,0,0,50,51,3,18,9,0,51,52,5,3,0,0,52,53,3,18,9,
		0,53,54,5,2,0,0,54,134,1,0,0,0,55,56,5,14,0,0,56,57,5,1,0,0,57,58,3,18,
		9,0,58,59,5,2,0,0,59,134,1,0,0,0,60,61,5,15,0,0,61,62,5,1,0,0,62,63,3,
		18,9,0,63,64,5,2,0,0,64,134,1,0,0,0,65,66,5,16,0,0,66,67,5,1,0,0,67,68,
		3,18,9,0,68,69,5,2,0,0,69,134,1,0,0,0,70,71,5,19,0,0,71,72,5,1,0,0,72,
		73,3,18,9,0,73,74,5,2,0,0,74,134,1,0,0,0,75,76,5,18,0,0,76,77,5,1,0,0,
		77,78,3,18,9,0,78,79,5,2,0,0,79,134,1,0,0,0,80,81,5,17,0,0,81,82,5,1,0,
		0,82,83,3,18,9,0,83,84,5,2,0,0,84,134,1,0,0,0,85,86,5,20,0,0,86,87,5,1,
		0,0,87,88,3,18,9,0,88,89,5,3,0,0,89,90,3,18,9,0,90,91,5,3,0,0,91,92,3,
		18,9,0,92,93,5,2,0,0,93,134,1,0,0,0,94,95,5,23,0,0,95,96,5,1,0,0,96,97,
		3,18,9,0,97,98,5,3,0,0,98,99,3,18,9,0,99,100,5,2,0,0,100,134,1,0,0,0,101,
		102,5,24,0,0,102,103,5,1,0,0,103,104,3,18,9,0,104,105,5,3,0,0,105,106,
		3,18,9,0,106,107,5,2,0,0,107,134,1,0,0,0,108,109,5,25,0,0,109,110,5,1,
		0,0,110,111,3,18,9,0,111,112,5,3,0,0,112,113,3,18,9,0,113,114,5,2,0,0,
		114,134,1,0,0,0,115,116,5,26,0,0,116,117,5,1,0,0,117,118,3,18,9,0,118,
		119,5,3,0,0,119,120,3,18,9,0,120,121,5,2,0,0,121,134,1,0,0,0,122,123,5,
		27,0,0,123,124,5,1,0,0,124,125,3,18,9,0,125,126,5,2,0,0,126,134,1,0,0,
		0,127,128,5,63,0,0,128,130,5,1,0,0,129,131,3,16,8,0,130,129,1,0,0,0,130,
		131,1,0,0,0,131,132,1,0,0,0,132,134,5,2,0,0,133,34,1,0,0,0,133,41,1,0,
		0,0,133,48,1,0,0,0,133,55,1,0,0,0,133,60,1,0,0,0,133,65,1,0,0,0,133,70,
		1,0,0,0,133,75,1,0,0,0,133,80,1,0,0,0,133,85,1,0,0,0,133,94,1,0,0,0,133,
		101,1,0,0,0,133,108,1,0,0,0,133,115,1,0,0,0,133,122,1,0,0,0,133,127,1,
		0,0,0,134,7,1,0,0,0,135,139,3,10,5,0,136,138,3,12,6,0,137,136,1,0,0,0,
		138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,143,1,0,0,0,141,139,
		1,0,0,0,142,144,3,14,7,0,143,142,1,0,0,0,143,144,1,0,0,0,144,145,1,0,0,
		0,145,146,5,8,0,0,146,9,1,0,0,0,147,148,5,4,0,0,148,149,5,1,0,0,149,150,
		3,18,9,0,150,151,5,2,0,0,151,152,5,5,0,0,152,153,3,2,1,0,153,11,1,0,0,
		0,154,155,5,6,0,0,155,156,5,4,0,0,156,157,5,1,0,0,157,158,3,18,9,0,158,
		159,5,2,0,0,159,160,5,5,0,0,160,161,3,2,1,0,161,13,1,0,0,0,162,163,5,6,
		0,0,163,164,3,2,1,0,164,15,1,0,0,0,165,170,3,18,9,0,166,167,5,3,0,0,167,
		169,3,18,9,0,168,166,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,
		0,0,0,171,17,1,0,0,0,172,170,1,0,0,0,173,174,6,9,-1,0,174,175,5,57,0,0,
		175,188,3,18,9,22,176,177,5,53,0,0,177,188,3,18,9,21,178,188,5,62,0,0,
		179,188,5,61,0,0,180,188,3,6,3,0,181,188,5,63,0,0,182,188,5,64,0,0,183,
		184,5,1,0,0,184,185,3,18,9,0,185,186,5,2,0,0,186,188,1,0,0,0,187,173,1,
		0,0,0,187,176,1,0,0,0,187,178,1,0,0,0,187,179,1,0,0,0,187,180,1,0,0,0,
		187,181,1,0,0,0,187,182,1,0,0,0,187,183,1,0,0,0,188,233,1,0,0,0,189,190,
		10,20,0,0,190,191,5,52,0,0,191,232,3,18,9,21,192,193,10,19,0,0,193,194,
		5,58,0,0,194,232,3,18,9,20,195,196,10,18,0,0,196,197,5,59,0,0,197,232,
		3,18,9,19,198,199,10,17,0,0,199,200,5,56,0,0,200,232,3,18,9,18,201,202,
		10,16,0,0,202,203,5,57,0,0,203,232,3,18,9,17,204,205,10,15,0,0,205,206,
		5,50,0,0,206,232,3,18,9,16,207,208,10,14,0,0,208,209,5,51,0,0,209,232,
		3,18,9,15,210,211,10,13,0,0,211,212,5,54,0,0,212,232,3,18,9,14,213,214,
		10,12,0,0,214,215,5,55,0,0,215,232,3,18,9,13,216,217,10,11,0,0,217,218,
		5,48,0,0,218,232,3,18,9,12,219,220,10,10,0,0,220,221,5,49,0,0,221,232,
		3,18,9,11,222,223,10,9,0,0,223,224,5,10,0,0,224,232,3,18,9,10,225,226,
		10,8,0,0,226,227,5,9,0,0,227,232,3,18,9,9,228,229,10,7,0,0,229,230,5,22,
		0,0,230,232,3,18,9,8,231,189,1,0,0,0,231,192,1,0,0,0,231,195,1,0,0,0,231,
		198,1,0,0,0,231,201,1,0,0,0,231,204,1,0,0,0,231,207,1,0,0,0,231,210,1,
		0,0,0,231,213,1,0,0,0,231,216,1,0,0,0,231,219,1,0,0,0,231,222,1,0,0,0,
		231,225,1,0,0,0,231,228,1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,234,
		1,0,0,0,234,19,1,0,0,0,235,233,1,0,0,0,9,27,130,133,139,143,170,187,231,
		233
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace RecipeCalculator.Engine.Parser
